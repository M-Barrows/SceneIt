#pragma checksum "E:\GitHub\SceneIt\Pages\Index.cshtml" "{ff1816ec-aa5e-4d10-87f7-6f4963833460}" "8a188be52d1c6d57297961e6f13878ae61b63566"
// <auto-generated/>
#pragma warning disable 1591
[assembly: global::Microsoft.AspNetCore.Razor.Hosting.RazorCompiledItemAttribute(typeof(TVTracker.Pages.Pages_Index), @"mvc.1.0.razor-page", @"/Pages/Index.cshtml")]
[assembly:global::Microsoft.AspNetCore.Mvc.RazorPages.Infrastructure.RazorPageAttribute(@"/Pages/Index.cshtml", typeof(TVTracker.Pages.Pages_Index), null)]
namespace TVTracker.Pages
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Mvc;
    using Microsoft.AspNetCore.Mvc.Rendering;
    using Microsoft.AspNetCore.Mvc.ViewFeatures;
#line 1 "E:\GitHub\SceneIt\Pages\_ViewImports.cshtml"
using TVTracker;

#line default
#line hidden
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"8a188be52d1c6d57297961e6f13878ae61b63566", @"/Pages/Index.cshtml")]
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"64d5765c00d3e624e63e1a31b09b02d83d70a9e1", @"/Pages/_ViewImports.cshtml")]
    public class Pages_Index : global::Microsoft.AspNetCore.Mvc.RazorPages.Page
    {
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_0 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("id", new global::Microsoft.AspNetCore.Html.HtmlString("createProgramForm"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_1 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("class", new global::Microsoft.AspNetCore.Html.HtmlString("form"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_2 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("v-on:submit.stop.prevent", new global::Microsoft.AspNetCore.Html.HtmlString("createProgram"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        #line hidden
        #pragma warning disable 0169
        private string __tagHelperStringValueBuffer;
        #pragma warning restore 0169
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperExecutionContext __tagHelperExecutionContext;
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperRunner __tagHelperRunner = new global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperRunner();
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager __backed__tagHelperScopeManager = null;
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager __tagHelperScopeManager
        {
            get
            {
                if (__backed__tagHelperScopeManager == null)
                {
                    __backed__tagHelperScopeManager = new global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager(StartTagHelperWritingScope, EndTagHelperWritingScope);
                }
                return __backed__tagHelperScopeManager;
            }
        }
        private global::Microsoft.AspNetCore.Mvc.TagHelpers.FormTagHelper __Microsoft_AspNetCore_Mvc_TagHelpers_FormTagHelper;
        private global::Microsoft.AspNetCore.Mvc.TagHelpers.RenderAtEndOfFormTagHelper __Microsoft_AspNetCore_Mvc_TagHelpers_RenderAtEndOfFormTagHelper;
        #pragma warning disable 1998
        public async override global::System.Threading.Tasks.Task ExecuteAsync()
        {
            BeginContext(0, 2, true);
            WriteLiteral("\r\n");
            EndContext();
#line 4 "E:\GitHub\SceneIt\Pages\Index.cshtml"
  
    ViewData["Title"] = "Home page";

#line default
#line hidden
            BeginContext(73, 1440, true);
            WriteLiteral(@"
<h1>My Watchlist</h1>
<div id=""App"" class = ""container"">
    <div class = ""col-md-6"">
       
        <table class = ""table"" id=""watchlist1"">
            <tr> <th>Show</th> <th>Season</th>  <th>Episode</th> <th>Delete</th> </tr>
            <tr v-for = ""index in items"">
                <td>
                    {{index.title}}
                </td> 
                <td>
                    <button class = ""btn""> 
                        <span class=""glyphicon glyphicon-minus""></span> 
                    </button>
                    {{index.season}}
                    <button class = ""btn""> 
                        <span class=""glyphicon glyphicon-plus""></span> 
                    </button>
                </td> 
                <td>
                    <button class = ""btn""> 
                        <span class=""glyphicon glyphicon-minus""></span> 
                    </button>
                    {{index.episode}}
                    <button class = ""btn""> 
                      ");
            WriteLiteral(@"  <span class=""glyphicon glyphicon-plus""></span> 
                    </button>
                </td> 
                <td><button class = ""btn btn-danger"" v-bind:id = ""index.id"" v-on:click = ""deleteProgram($event)""> 
                    <span class=""glyphicon glyphicon-trash""></span>
                </button></td>
                </tr>
        </table>

    </div>
    <div class = ""col-md-3"">
        ");
            EndContext();
            BeginContext(1513, 780, false);
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("form", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "637ba0db571e463b86279524d15712f4", async() => {
                BeginContext(1598, 688, true);
                WriteLiteral(@"
            <h4>Add a new show</h4>
            <div class=""form-group"">
                <label for=""title"">Title</label>
                <input type=""text"" class=""form-control"" id=""title"" />
            </div>                
            <div class=""form-group"">
                <label for=""season"">Season</label>
                <input type=""number"" class=""form-control"" id=""season"" />
            </div>
            <div class=""form-group"">
                <label for=""episode"">Episode</label>
                <input type=""number"" class=""form-control"" id=""episode"" />
            </div>
            <button type=""submit"" class=""btn btn-primary"">Submit</button>
        ");
                EndContext();
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_FormTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.FormTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_FormTagHelper);
            __Microsoft_AspNetCore_Mvc_TagHelpers_RenderAtEndOfFormTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.RenderAtEndOfFormTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_RenderAtEndOfFormTagHelper);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_0);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_1);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_2);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            EndContext();
            BeginContext(2293, 22, true);
            WriteLiteral("\r\n    </div>\r\n</div>\r\n");
            EndContext();
            DefineSection("Scripts", async() => {
                BeginContext(2333, 8301, true);
                WriteLiteral(@"
    <script>

    var ItemsVue = new Vue({
        el: '#App',
        data: {
            items: [],
            createForm: {
                title: '',
                season: 0,
                episode: 0
            },
            editProgramObject {
                id: 0,
                title: '',
                season: 0,
                episode: 0
            }
        },
        mounted: function () {
            var self = this;
            $.ajax({
                url: '/api/TVPrograms',
                dataType: 'json',
                contentType: 'application/json',
                method: 'GET',
                success: function (data) {
                    self.items = data;
                },
                error: function (error) {
                    console.log(error);
                    alert(""Oh no! We couldn't find your shows. D:"");
                }
            });
        },
        methods: { 
            getShows: function() {
              ");
                WriteLiteral(@"  var self = this;
                $.ajax({
                    url: '/api/TVPrograms',
                    dataType: 'json',
                    contentType: 'application/json',
                    method: 'GET',
                    success: function (data) {
                        self.items = data;
                    },
                    error: function (error) {
                        console.log(error);
                        alert(""Oh no! We couldn't find your shows. D:"");
                    }
                });
            },
            createProgram: function () {
                var self = this;
                self.createForm.title = $(""#title"").val();
                self.createForm.season = $(""#season"").val();
                self.createForm.episode = $(""#episode"").val();
                $.ajax({
                    url:""/api/TVPrograms/"",
                    dataType: 'json',
                    contentType: 'application/json',
                    method: 'POST',");
                WriteLiteral(@"
                    data: JSON.stringify(self.createForm),
                    success: function (data){
                        self.getShows();
                        $(""#title"").val("""");
                        $(""#season"").val("""");
                        $(""#episode"").val("""");
                    },
                    error: function (error) {
                        console.log(error);
                        alert(""Whoops! We couldn't add your show to the list."");
                    }
                });
            },
            deleteProgram: function(event) {
                var self = this;
                programID = event.currentTarget.id;
                $.ajax({
                    url:""/api/TVPrograms/"" + programID,
                    dataType: 'json',
                    contentType: 'application/json',
                    method: 'DELETE',
                    success: function(data){
                        self.getShows();
                    },
               ");
                WriteLiteral(@"     error: function(error){
                        alert(""Show not deleted. Try again."");
                    }
                });
                
            },
            editProgram: function(id, title, season, episode, callback) {
                var requestData = {
                    id: id,
                    title: title,
                    season: season,
                    episode: episode
                };
                $.ajax({
                    url: '/api/TVPrograms/' + id,
                    dataType: 'json',
                    contentType: 'application/json',
                    method: 'PUT',
                    data: JSON.stringify(requestData)
                }).done(function(responseData, status, xhr) {
                    loadData(); // RELOAD THE BOOK DATA
                    if (callback) {
                        callback();
                    }
                }).fail(function(xhr, status, error) {
                    alert(""There was an error s");
                WriteLiteral(@"aving your book"");
                });
            }

        }     
    });


    function loadData() {
        $.ajax({
            url:""/api/TVPrograms"",
            dataType: 'json',
            contentType: 'application/json',
            method: 'GET'
        }).done(function(responseJSON, status, xhr) {
            buildWatchList(responseJSON);
        }).fail(function(xhr,status,error){
            alert(""Oh no! We couldn't find your shows. D:"");
        });
    }

    $(""#watchlist"").on('click', 'button.program-delete', function(){
        var id = $(this).parents(""tr"").attr('program-id');
        console.log(id);
        deleteProgram(id);
        return false;
    })
    $(""#watchlist"").on('click', 'button.season-up', function(){
        var id = $(this).parent().parent().attr('program-id');
        var title = $(this).parent().prev().text();
        var season = $(this).parent().text();
        var episode = $(this).parent().next().text();
        editProgram(id,tit");
                WriteLiteral(@"le, parseInt(season)+1,parseInt(episode));
        return false;
    });
    $(""#watchlist"").on('click', 'button.season-down', function(){
        var id = $(this).parent().parent().attr('program-id');
        var title = $(this).parent().prev().text();
        var season = $(this).parent().text();
        var episode = $(this).parent().next().text();
        console.log([id,title,season,episode]);
        editProgram(id,title,parseInt(season)-1,parseInt(episode));
        return false;
    });
    $(""#watchlist"").on('click', 'button.episode-up', function(){
        var id = $(this).parent().parent().attr('program-id');
        var title = $(this).parent().prev().prev().text();
        var season = $(this).parent().prev().text();
        var episode = $(this).parent().text();
        editProgram(id,title, parseInt(season),parseInt(episode)+1);
        return false;
    });
    $(""#watchlist"").on('click', 'button.episode-down', function(){
        var id = $(this).parent().parent().attr('p");
                WriteLiteral(@"rogram-id');
        var title = $(this).parent().prev().prev().text();
        var season = $(this).parent().prev().text();
        var episode = $(this).parent().text();
        editProgram(id,title, parseInt(season),parseInt(episode)-1);
        return false;
    });

    function createProgram() {
        var requestData = {
            title: $(""#title"").val(),
            season: $(""#season"").val(),
            episode: $(""#episode"").val()
        };
        $.ajax({
            url:""/api/TVPrograms/"",
            dataType: 'json',
            contentType: 'application/json',
            method: 'POST',
            data: JSON.stringify(requestData)
        }).done(function(responseJSON, status, xhr) {
            loadData();
            $(""#title"").val("""");
            $(""#season"").val("""");
            $(""#episode"").val("""");
        }).fail(function(xhr,status,error){
            alert(""Whoops! We couldn't add your show to the list."");
        });
    };

    function delet");
                WriteLiteral(@"eProgram(id) {
        $.ajax({
            url:""/api/TVPrograms/"" + id,
            dataType: 'json',
            contentType: 'application/json',
            method: 'DELETE'
        }).done(function(responseJSON, status, xhr){
            loadData();
        }).fail(function(xhr,status,error){
            alert(""Show not deleted. Try again."")
        })
    }

    
    function editProgram(id, title, season, episode, callback) {
        var requestData = {
            id: id,
            title: title,
            season: season,
            episode: episode
        };
        $.ajax({
            url: '/api/TVPrograms/' + id,
            dataType: 'json',
            contentType: 'application/json',
            method: 'PUT',
            data: JSON.stringify(requestData)
        }).done(function(responseData, status, xhr) {
            loadData(); // RELOAD THE BOOK DATA
            if (callback) {
                callback();
            }
        }).fail(function(xhr, statu");
                WriteLiteral("s, error) {\r\n            alert(\"There was an error saving your book\");\r\n        });\r\n    }\r\n\r\n    </script>\r\n");
                EndContext();
            }
            );
        }
        #pragma warning restore 1998
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.ViewFeatures.IModelExpressionProvider ModelExpressionProvider { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IUrlHelper Url { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IViewComponentHelper Component { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IJsonHelper Json { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper<IndexModel> Html { get; private set; }
        public global::Microsoft.AspNetCore.Mvc.ViewFeatures.ViewDataDictionary<IndexModel> ViewData => (global::Microsoft.AspNetCore.Mvc.ViewFeatures.ViewDataDictionary<IndexModel>)PageContext?.ViewData;
        public IndexModel Model => ViewData.Model;
    }
}
#pragma warning restore 1591
